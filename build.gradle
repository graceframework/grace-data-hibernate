buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        // classpath "io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1"
        classpath "org.graceframework:grace-gradle-plugin:$graceVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
        classpath "org.gradle:test-retry-gradle-plugin:1.3.1"
    }
}

group "org.graceframework"
version project.projectVersion

ext {
    isTravisBuild = System.getenv().get("TRAVIS") == 'true'
    isCiBuild = project.hasProperty("isCiBuild") || System.getenv().get("CI") as Boolean
    isBuildSnapshot = version.endsWith('-SNAPSHOT')
    isReleaseVersion = !isBuildSnapshot
    nexusUsername = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
    nexusPassword = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
}

ext."signing.keyId" = System.getenv("SIGNING_KEY") ?: project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : null
ext."signing.password" = System.getenv("SIGNING_PASSPHRASE") ?: project.hasProperty("signing.password") ? project.getProperty('signing.password') : null
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : null
ext['junit-jupiter.version'] = junitJupiterVersion

if (isReleaseVersion) {
    apply plugin: 'maven-publish'
    apply plugin: "io.github.gradle-nexus.publish-plugin"

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
                nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

subprojects { Project subproject ->

    repositories {
        // mavenLocal()
        mavenCentral()
        // maven { url "https://repo.grails.org/grails/core" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    ext {
        def name = project.name
        if (name.startsWith('grace') && name.endsWith('-plugin')) {
            name = 'hibernate5'
        }
        projectArtifactId = name
        isExample = subproject.name.startsWith('example')
        isPluginProject = subproject.name.endsWith("-plugin") && (subproject.name.startsWith("grace") || subproject.name.startsWith("rx-"))
        isGrails3PluginProject = subproject.name.endsWith("-plugin")
    }

    if(isExample) {
        apply plugin: "groovy"

        dependencies {
            testImplementation "io.projectreactor:reactor-test:3.4.17"
            testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
            testImplementation("org.spockframework:spock-core:$spockVersion") { transitive = false}
            testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
            testImplementation "org.junit.platform:junit-platform-runner:1.8.2"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        }

        apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"
        return
    }

    apply plugin: 'groovy'

    configurations {
        documentation.extendsFrom(compileClasspath)
    }

    if (isPluginProject) {
        group "org.graceframework.plugins"
        version project.rootProject.version
    }
    else {
        group "org.graceframework"
        version project.rootProject.version
    }

    if (subproject.name == 'docs') {
        return
    }

    // if (isGrails3PluginProject) {
    //     apply plugin: "org.graceframework.grace-plugin"
    // }
    // else {
    //     apply plugin:"groovy"
    // }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    apply plugin: 'codenarc'
    apply plugin: 'signing'
    apply plugin: "org.gradle.test-retry"

    dependencies {
        documentation "org.fusesource.jansi:jansi:$jansiVersion"
        documentation "org.codehaus.groovy:groovy-dateutil:$groovyVersion"
        documentation "org.codehaus.groovy:groovy-xml:$groovyVersion"
        documentation "info.picocli:picocli:$picocliVersion"
        documentation "com.github.javaparser:javaparser-core:$javaParserCoreVersion"

        implementation "org.codehaus.groovy:groovy:$groovyVersion"
        testImplementation "org.codehaus.groovy:groovy-test-junit5:$groovyVersion"
        testImplementation("org.spockframework:spock-core:$spockVersion") { transitive = false}
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.platform:junit-platform-runner:1.8.2"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
    }

    apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
        withJavadocJar()
        withSourcesJar()
    }

    // tasks.withType(Test) {
    //     configure {
    //         retry {
    //             maxRetries = 2
    //             maxFailures = 20
    //             failOnPassedAfterRetry = true
    //             filter {
    //                 excludeClasses.add("*GroovyChangeLogSpec")
    //             }
    //         }
    //     }
    // }

    groovydoc.classpath = configurations.documentation

    publishing {

        publications {
            maven(MavenPublication) {
                artifactId projectArtifactId

                from components.java

                afterEvaluate {
                    if(isGrails3PluginProject) {
                        artifact source:"${sourceSets.main.groovy.outputDir}/META-INF/grails-plugin.xml",
                                classifier:"plugin",
                                extension:'xml'
                    }
                }
                pom {
                    name = 'Grace Data Hibernate 5'
                    description = 'Grace Data for Hibernate 5'
                    url = 'https://gorm.graceframework.org/latest/hibernate'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    scm {
                        url = 'https://github.com/graceframework/grace-data-hibernate'
                        connection = 'https://github.com/graceframework/grace-data-hibernate'
                        developerConnection = 'https://github.com/graceframework/grace-data-hibernate'
                    }

                    developers {
                        developer {
                            id = 'rainboyan'
                            name = 'Michael Yan'
                        }
                    }
                }

            }
        }
    }

    afterEvaluate {
        signing {
            required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
            sign publishing.publications.maven
        }
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    //do not generate extra load on Nexus with new staging repository if signing fails
    tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
        shouldRunAfter(tasks.withType(Sign))
    }

    checkstyle {
        toolVersion = "10.3.2"
        configDirectory.set(rootProject.file("$rootDir/gradle/checkstyle"))
    }

    codenarc {
        toolVersion = '3.1.0'
        setConfigFile(new File("$rootDir/gradle/codenarc/codenarc.groovy"))
    }

}
